

一、安装git
    下载，安装
    git-bash

二、配置
    $ git config --global user.name "Your Name"
    $ git config --global user.email "email@example.com"
    
三、注册github
    1.注册
    2.配置ssh：
        git-bash:在主目录下：
        ssh-keygen -t rsa -C "jiilii@126.com"
        在.ssh目录中将id_rsa.pub内容复制到github的setting相关项中。

四、创建版本库
    $ mkdir learngit
    $ cd learngit
    $ pwd
    $ git init

     或：git clone git@github.com:jiilii/learngit.git
            git clone https://github.com/jiilii/learngit.git

五、操作
    初始化一个Git仓库，使用git init命令。

    添加文件到Git仓库，分两步：
    1.使用命令git add <file>，注意，可反复多次使用，添加多个文件；实际上就是把文件修改添加到暂存区；
        git add readme.txt
        git add .
    2.使用命令git commit -m <message>，完成。实际上就是把暂存区的所有内容提交到当前分支。

        如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
        
        查看提交的历史版本
        git log
        git log --pretty=oneline
        回退版本，把工作区的文件更新。
        git reset --hard 1094a
        git reset --hard HEAD~5

        撤销修改：从暂存区恢复到工作区
        git checkout -- readme.txt 或
        git restore -- readme.txt   /   git restore -- .
        
        版本恢复：从版本库恢复到暂存区和工作区
        git reset --hard HEAD~
        
        删除文件
        git rm del.txt
    
六、远程仓库
    1.在github上创建learngit仓库：
        关联一个远程库，使用命令：
        git remote add origin git@github.com:jiilii/learngit.git
        或
        git remote add origin https://github.com/jiilii/learngit.git
        或
        git push --force git@github.com:jiilii/learngit.git
    2.第一次推送master分支的所有内容：
        git push -u origin master
        git push -u -f origin master
        
        git push origin master
    
   3.从远程库克隆：
     
        要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
        Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
        
        git clone https://github.com/jiilii/learngit.git
        git clone git@github.com:jiilii/learngit.git 
    
七、分支管理
    
    1.我们创建dev分支，然后切换到dev分支：
        git branch dev
        git switch dev   / git checkout dev
        或：
        git switch -c dev   /   git checkout -b dev
    2.查看分支
        git branch 
        git branch命令会列出所有分支，当前分支前面会标一个*号。然后，我们就可以在dev分支上正常提交。
    3.合并分支
        git switch master  
        git merge dev
        git merge命令用于合并指定分支到当前分支。
    4.删除分支
        git branch -d dev
        git branch
    5.push
        git push origin dev
    6.解决冲突
        
    7.合并并创建新的分支
        git merge --no-ff -m "merge with no-ff" dev
    8.分支管理策略
        master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活，干活都在dev分支上。
    9.bug分支
        在dev分支上修改，不提交，储存当前工作现场，等待恢复后继续工作
        git stash
        
        在master分支上修改bug，提交。
        
        查看工作现场：
        git stash list
        恢复工作现场：
        git stash apply 
        git stash drop来删除
        或者：
        git stash pop
        
    10.Feature分支
        强行删除一个分支
        git branch -D feature-129
        
    11.多人协作
        当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
        要查看远程库的信息，用：
        git remote
        或者，用：
        git remote -v
        
        推送分支（把该分支上的所有本地提交推送到远程库）
        git push origin master
        git push origin dev
    
        抓取分支
    
    
    
    
    
    12.rebase
    
    123
    1111111
    
    
    
    
    
    